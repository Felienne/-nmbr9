"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class deck {
    constructor() {
        this.allcards = [0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9];
        this.index = 0;
        this.shuffle();
    }
    shuffle() {
        for (let i = this.allcards.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.allcards[i], this.allcards[j]] = [this.allcards[j], this.allcards[i]];
        }
    }
    draw() {
        this.index++;
        const end = this.allcards.length;
        if (this.index >= end)
            return false;
        return { turn: this.index, value: this.allcards[this.index] };
    }
}
exports.deck = deck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjYXJkcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUtBLE1BQWEsSUFBSTtJQUliO1FBSFEsYUFBUSxHQUFZLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO1FBS2xFLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ2xCLENBQUM7SUFFTyxPQUFPO1FBRVgsS0FBSyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUMvQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvRTtJQUNMLENBQUM7SUFFTSxJQUFJO1FBRVAsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDakMsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFFLEdBQUc7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUNsQyxPQUFPLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFDLENBQUE7SUFDL0QsQ0FBQztDQUNKO0FBekJELG9CQXlCQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgdHVwbGUge1xuICAgIHR1cm46IG51bWJlcjtcbiAgICB2YWx1ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgZGVjayB7XG4gICAgcHJpdmF0ZSBhbGxjYXJkczpudW1iZXJbXSA9IFswLDAsMSwxLDIsMiwzLDMsNCw0LDUsNSw2LDYsNyw3LDgsOCw5LDldO1xuICAgIHByaXZhdGUgaW5kZXg6bnVtYmVyO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKClcbiAgICB7XG4gICAgICAgIHRoaXMuaW5kZXggPSAwO1xuICAgICAgICB0aGlzLnNodWZmbGUoKVxuICAgIH1cblxuICAgIHByaXZhdGUgc2h1ZmZsZSgpOnZvaWRcbiAgICB7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmFsbGNhcmRzLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICAgICAgICAgIFt0aGlzLmFsbGNhcmRzW2ldLCB0aGlzLmFsbGNhcmRzW2pdXSA9IFt0aGlzLmFsbGNhcmRzW2pdLCB0aGlzLmFsbGNhcmRzW2ldXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KCk6dHVwbGV8ZmFsc2VcbiAgICB7XG4gICAgICAgIHRoaXMuaW5kZXgrKztcbiAgICAgICAgY29uc3QgZW5kID0gdGhpcy5hbGxjYXJkcy5sZW5ndGg7XG4gICAgICAgIGlmICh0aGlzLmluZGV4Pj1lbmQpIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHt0dXJuOiB0aGlzLmluZGV4LCB2YWx1ZTogdGhpcy5hbGxjYXJkc1t0aGlzLmluZGV4XX1cbiAgICB9XG59Il19