"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tile = require("./tile");
const cards = require("./cards");
const b = require("./board");
function getRandom(list) {
    if (list.length !== 0) {
        const len = list.length;
        const index = Math.floor(Math.random() * len);
        return list[index];
    }
    else {
        return undefined;
    }
}
const deck = new cards.deck;
const board = new b.board;
let turn_tuple = deck.draw();
let t = tile.getTile(1);
t.turn = 1;
board.place(0, 38, t, b.Direction.Up);
console.log(board.boardToString());
let t2 = tile.getTile(9);
t2.turn = 2;
board.place(2, 38, t2, b.Direction.Up);
console.log(board.boardToString());
let t3 = tile.getTile(6);
t3.turn = 3;
console.log(board.canPlace(2, 38, t3, b.Direction.Right));
board.place(2, 38, t3, b.Direction.Right);
console.log(board.boardToString());
// while (turn_tuple !== false)
// {
//     const value = turn_tuple.value;
//     let t:tile.Tile = tile.getTile(value);
//     t.turn = turn_tuple.turn;
//     if (turn_tuple.turn === 1){
//         console.log(t)        
//         board.place(38,38,t)
//     }
//     else{
//         let locs = board.getOptions().filter(p => board.canPlace(p.x, p.y, t));
//         const loc = getRandom(locs);
//         if (loc !== undefined){
//             console.log(loc.x, loc.y, t.value)
//             board.place(loc.x, loc.y, t)
//         }
//     }
//     turn_tuple = deck.draw();
//     console.log("---")
//     console.log(board.boardToString())
// }
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsaUNBQWlDO0FBQ2pDLDZCQUE2QjtBQUU3QixTQUFTLFNBQVMsQ0FBSSxJQUFRO0lBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUM7UUFDbEIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN4QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztRQUM5QyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN0QjtTQUNJO1FBQ0QsT0FBTyxTQUFTLENBQUE7S0FDbkI7QUFDTCxDQUFDO0FBR0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDO0FBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUUxQixJQUFJLFVBQVUsR0FBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7QUFFN0IsSUFBSSxDQUFDLEdBQWEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQTtBQUNWLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLEVBQUUsRUFBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQTtBQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFBO0FBRWxDLElBQUksRUFBRSxHQUFhLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkMsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUE7QUFDWCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUE7QUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtBQUVsQyxJQUFJLEVBQUUsR0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25DLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFBO0FBQ1gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtBQUN2RCxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUE7QUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQTtBQUVsQywrQkFBK0I7QUFDL0IsSUFBSTtBQUNKLHNDQUFzQztBQUN0Qyw2Q0FBNkM7QUFDN0MsZ0NBQWdDO0FBRWhDLGtDQUFrQztBQUNsQyxpQ0FBaUM7QUFDakMsK0JBQStCO0FBQy9CLFFBQVE7QUFDUixZQUFZO0FBQ1osa0ZBQWtGO0FBQ2xGLHVDQUF1QztBQUV2QyxrQ0FBa0M7QUFDbEMsaURBQWlEO0FBQ2pELDJDQUEyQztBQUMzQyxZQUFZO0FBQ1osUUFBUTtBQUNSLGdDQUFnQztBQUVoQyx5QkFBeUI7QUFDekIseUNBQXlDO0FBRXpDLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB0aWxlIGZyb20gXCIuL3RpbGVcIjtcbmltcG9ydCAqIGFzIGNhcmRzIGZyb20gXCIuL2NhcmRzXCI7XG5pbXBvcnQgKiBhcyBiIGZyb20gXCIuL2JvYXJkXCI7XG5cbmZ1bmN0aW9uIGdldFJhbmRvbTxUPihsaXN0OlRbXSl7XG4gICAgaWYgKGxpc3QubGVuZ3RoICE9PSAwKXtcbiAgICAgICAgY29uc3QgbGVuID0gbGlzdC5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbGVuKTtcbiAgICAgICAgcmV0dXJuIGxpc3RbaW5kZXhdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgIH1cbn1cblxuXG5jb25zdCBkZWNrID0gbmV3IGNhcmRzLmRlY2s7XG5jb25zdCBib2FyZCA9IG5ldyBiLmJvYXJkO1xuXG5sZXQgdHVybl90dXBsZSAgPSBkZWNrLmRyYXcoKVxuXG5sZXQgdDp0aWxlLlRpbGUgPSB0aWxlLmdldFRpbGUoMSk7XG50LnR1cm4gPSAxXG5ib2FyZC5wbGFjZSgwLDM4LHQsIGIuRGlyZWN0aW9uLlVwKVxuY29uc29sZS5sb2coYm9hcmQuYm9hcmRUb1N0cmluZygpKVxuXG5sZXQgdDI6dGlsZS5UaWxlID0gdGlsZS5nZXRUaWxlKDkpO1xudDIudHVybiA9IDJcbmJvYXJkLnBsYWNlKDIsMzgsdDIsYi5EaXJlY3Rpb24uVXApXG5jb25zb2xlLmxvZyhib2FyZC5ib2FyZFRvU3RyaW5nKCkpXG5cbmxldCB0Mzp0aWxlLlRpbGUgPSB0aWxlLmdldFRpbGUoNik7XG50My50dXJuID0gM1xuY29uc29sZS5sb2coYm9hcmQuY2FuUGxhY2UoMiwzOCx0MywgYi5EaXJlY3Rpb24uUmlnaHQpKVxuYm9hcmQucGxhY2UoMiwzOCx0MyxiLkRpcmVjdGlvbi5SaWdodClcbmNvbnNvbGUubG9nKGJvYXJkLmJvYXJkVG9TdHJpbmcoKSlcblxuLy8gd2hpbGUgKHR1cm5fdHVwbGUgIT09IGZhbHNlKVxuLy8ge1xuLy8gICAgIGNvbnN0IHZhbHVlID0gdHVybl90dXBsZS52YWx1ZTtcbi8vICAgICBsZXQgdDp0aWxlLlRpbGUgPSB0aWxlLmdldFRpbGUodmFsdWUpO1xuLy8gICAgIHQudHVybiA9IHR1cm5fdHVwbGUudHVybjtcblxuLy8gICAgIGlmICh0dXJuX3R1cGxlLnR1cm4gPT09IDEpe1xuLy8gICAgICAgICBjb25zb2xlLmxvZyh0KSAgICAgICAgXG4vLyAgICAgICAgIGJvYXJkLnBsYWNlKDM4LDM4LHQpXG4vLyAgICAgfVxuLy8gICAgIGVsc2V7XG4vLyAgICAgICAgIGxldCBsb2NzID0gYm9hcmQuZ2V0T3B0aW9ucygpLmZpbHRlcihwID0+IGJvYXJkLmNhblBsYWNlKHAueCwgcC55LCB0KSk7XG4vLyAgICAgICAgIGNvbnN0IGxvYyA9IGdldFJhbmRvbShsb2NzKTtcblxuLy8gICAgICAgICBpZiAobG9jICE9PSB1bmRlZmluZWQpe1xuLy8gICAgICAgICAgICAgY29uc29sZS5sb2cobG9jLngsIGxvYy55LCB0LnZhbHVlKVxuLy8gICAgICAgICAgICAgYm9hcmQucGxhY2UobG9jLngsIGxvYy55LCB0KVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIHR1cm5fdHVwbGUgPSBkZWNrLmRyYXcoKTtcblxuLy8gICAgIGNvbnNvbGUubG9nKFwiLS0tXCIpXG4vLyAgICAgY29uc29sZS5sb2coYm9hcmQuYm9hcmRUb1N0cmluZygpKVxuIFxuLy8gfVxuXG4iXX0=