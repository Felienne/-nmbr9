"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tile = require("./tile");
const cards = require("./cards");
const b = require("./board");
const deck = new cards.deck;
const board = new b.board;
let turn_tuple = deck.draw();
while (turn_tuple !== false) {
    const value = turn_tuple.value;
    let t = tile.getTile(value);
    if (turn_tuple.turn === 1) {
        console.log(t);
        board.place(0, 0, t);
    }
    else {
        let loc = board.getAdjacencies().find(p => board.canPlace(p.x, p.y, t));
        if (loc !== undefined) {
            console.log(loc.x, loc.y, t.value);
            board.place(loc.x, loc.y, t);
        }
    }
    turn_tuple = deck.draw();
    // t.turn = turn
    console.log("---");
    console.log(board.toString());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdhbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrQkFBK0I7QUFDL0IsaUNBQWlDO0FBQ2pDLDZCQUE2QjtBQUc3QixNQUFNLElBQUksR0FBRyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBRTFCLElBQUksVUFBVSxHQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUM3QixPQUFPLFVBQVUsS0FBSyxLQUFLLEVBQzNCO0lBRUksTUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztJQUMvQixJQUFJLENBQUMsR0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRXRDLElBQUksVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUM7UUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNkLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsQ0FBQTtLQUNyQjtTQUNHO1FBQ0EsSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdkUsSUFBSSxHQUFHLEtBQUssU0FBUyxFQUFDO1lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQTtZQUNsQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtTQUMvQjtLQUNKO0lBQ0QsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV6QixnQkFBZ0I7SUFFaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO0NBSWhDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgdGlsZSBmcm9tIFwiLi90aWxlXCI7XG5pbXBvcnQgKiBhcyBjYXJkcyBmcm9tIFwiLi9jYXJkc1wiO1xuaW1wb3J0ICogYXMgYiBmcm9tIFwiLi9ib2FyZFwiO1xuXG5cbmNvbnN0IGRlY2sgPSBuZXcgY2FyZHMuZGVjaztcbmNvbnN0IGJvYXJkID0gbmV3IGIuYm9hcmQ7XG5cbmxldCB0dXJuX3R1cGxlICA9IGRlY2suZHJhdygpXG53aGlsZSAodHVybl90dXBsZSAhPT0gZmFsc2UpXG57XG5cbiAgICBjb25zdCB2YWx1ZSA9IHR1cm5fdHVwbGUudmFsdWU7XG4gICAgbGV0IHQ6dGlsZS5UaWxlID0gdGlsZS5nZXRUaWxlKHZhbHVlKTtcblxuICAgIGlmICh0dXJuX3R1cGxlLnR1cm4gPT09IDEpe1xuICAgICAgICBjb25zb2xlLmxvZyh0KSAgICAgICAgXG4gICAgICAgIGJvYXJkLnBsYWNlKDAsMCx0KVxuICAgIH1cbiAgICBlbHNle1xuICAgICAgICBsZXQgbG9jID0gYm9hcmQuZ2V0QWRqYWNlbmNpZXMoKS5maW5kKHAgPT4gYm9hcmQuY2FuUGxhY2UocC54LCBwLnksIHQpKVxuICAgICAgICBpZiAobG9jICE9PSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgY29uc29sZS5sb2cobG9jLngsIGxvYy55LCB0LnZhbHVlKVxuICAgICAgICAgICAgYm9hcmQucGxhY2UobG9jLngsIGxvYy55LCB0KVxuICAgICAgICB9XG4gICAgfVxuICAgIHR1cm5fdHVwbGUgPSBkZWNrLmRyYXcoKTtcblxuICAgIC8vIHQudHVybiA9IHR1cm5cblxuICAgIGNvbnNvbGUubG9nKFwiLS0tXCIpXG4gICAgY29uc29sZS5sb2coYm9hcmQudG9TdHJpbmcoKSlcblxuIFxuXG59XG5cbiJdfQ==